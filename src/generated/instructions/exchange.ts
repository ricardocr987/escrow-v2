/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category Exchange
 * @category generated
 */
const exchangeStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'ExchangeInstructionArgs'
)
/**
 * Accounts required by the _exchange_ instruction
 * @category Instructions
 * @category Exchange
 * @category generated
 */
export type ExchangeInstructionAccounts = {
  escrow: web3.PublicKey
  vault: web3.PublicKey
  authority: web3.PublicKey
  maker: web3.PublicKey
  tokenAccountMakerB: web3.PublicKey
  tokenAccountTakerA: web3.PublicKey
  tokenAccountTakerB: web3.PublicKey
  takerMint: web3.PublicKey
}

const exchangeInstructionDiscriminator = [47, 3, 27, 97, 215, 236, 219, 144]

/**
 * Creates a _Exchange_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 *
 * @category Instructions
 * @category Exchange
 * @category generated
 */
export function createExchangeInstruction(
  accounts: ExchangeInstructionAccounts
) {
  const {
    escrow,
    vault,
    authority,
    maker,
    tokenAccountMakerB,
    tokenAccountTakerA,
    tokenAccountTakerB,
    takerMint,
  } = accounts

  const [data] = exchangeStruct.serialize({
    instructionDiscriminator: exchangeInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: escrow,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: vault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: maker,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: tokenAccountMakerB,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: tokenAccountTakerA,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: tokenAccountTakerB,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: takerMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      'fqj2TjuPyPpW8a3biqpgfCJn2bWqmGGrDws4uvv8LFZ'
    ),
    keys,
    data,
  })
  return ix
}
